# Configure logging
log "/var/log/bird.log" all;
log syslog { info, remote, warning, error, auth, fatal, bug };
# log "/var/log/bird.log" { debug, trace, info, remote, warning, error, auth, fatal, bug };

# set router id
router id 192.168.0.3;

# Turn on global debugging of all protocols (all messages or just selected classes)
# debug protocols { events, states };

# Turn on internal watchdog
watchdog warning 5 s;
watchdog timeout 30 s;

# You can define your own constants
# define my_asn = 65000;
# define my_addr = 198.51.100.1;

# Tables master4 and master6 are defined by default
# ipv4 table master4;
# ipv6 table master6;

# The Device protocol is not a real routing protocol. It does not generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel. It is necessary in almost any configuration.
protocol device DEVICE {
}

protocol direct DIRECT {
    ipv4;
    ipv6;
}


# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD
# routing tables with the OS kernel. One instance per table.
protocol kernel KERNEL4 {
    learn all;              # Learn alien routes from the kernel
    kernel table 10;        # Kernel table to synchronize with (default: main)
    ipv4 {                  # Connect protocol to IPv4 table by channel
          table master4;    # Default IPv4 table is master4
          import all;       # Import to table, default is import all
          export none;      # Export to protocol. default is export none
    };
}

# Another instance for IPv6, skipping default options
protocol kernel KERNEL6 {
    learn all;              # Learn alien routes from the kernel
    kernel table 10;        # Kernel table to synchronize with (default: main)
    ipv6 {                  # Connect protocol to IPv4 table by channel
          table master6;    # Default IPv4 table is master4
          import all;       # Import to table, default is import all
          export none;      # Export to protocol. default is export none
    };
}

# Static routes (Again, there can be multiple instances, for different address
# families and to disable/enable various groups of static routes on the fly).

## protocol static {
##     ipv4;                                       # Again, IPv4 channel with default options
##     route 10.0.0.0/28 via 198.51.100.10 {
##         bgp_community.add((65535, 65281));      # Set extended BGP attribute
##         bgp_large_community.add((64512, 1, 1)); # Set extended BGP attribute
##         bgp_local_pref = 20;
##         bgp_med = 100;
##         bgp_path =
##         bgp_origin = ORIGIN_IGP;                # ORIGIN_IGP / ORIGIN_EGP / ORIGIN_INCOMPLETE
##         bgp_next_hop
##     };
## }

## protocol static {
##         ipv6;                                           # Channel is mandatory
##         route 2001:db8:10::/48 via 2001:db8:1::1;       # Route with global nexthop
## }

# BGP example, explicit name 'uplink1' is used instead of default 'bgp1'
protocol bgp TRANSITv4 {
   description "TRANSITv4";
   local 192.168.0.3 as 65003;
   neighbor 192.168.0.4 as 65004;
   hold time 90;        # Default is 240
   # multihop;

   ipv4 {               # regular IPv4 unicast (1/1)
    #   import filter rt_import;
    #   export where source ~ [ RTS_STATIC, RTS_BGP ];
   };

   #ipv6 {               # regular IPv6 unicast (2/1)
   #    import filter rt_import;
   #    export filter {  # The same as 'where' expression above
   #        if source ~ [ RTS_STATIC, RTS_BGP ]
   #        then accept;
   #        else reject;
   #    };
   #};
}

protocol bgp TRANSITv6 {
   description "TRANSITv6";
   local 2001:db8:172::3 as 65003;
   neighbor 2001:db8:172::4 as 65004;
   hold time 90;        # Default is 240
   # multihop;

   ipv6 {               # regular IPv6 unicast (2/1)
   };
}
